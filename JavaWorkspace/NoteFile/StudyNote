예정 커리큘럼
1. Java Programming - JDBC(MySQL) - Front UI(HTML5,CSS3,JavaScript) 
- Web programming(Servlet, WAS, Design Pattern) - Ajax - Framework(MyBatis, Spring MVC)/Maven,SpringBoot
- Restful API(PostMan, Sweager) - Vue(CLI, SPC,VSCode)
Maven Spring Framework + SpringBoot API = Cross Domain
BigData + AI + ELASTICSearch

20.04.06

\\192.168.0.33

jdk => Java development kit

클라이언트 사이드와 서버 사이드가 존재
J2SE
=> 클라이언트 사이드만 존재하면 됨, 로컬에서 작동
J2EE
=> 웹과 서버 사이드가 둘다 존재해야함
J2ME가 존재(모바일 버전) 하지만 안드로이드 등장으로 사라짐

jre
=> JAVA  runtime environment, 미리 만들어놓은 API(라이브러리)환경
=> 기계어로 존재

확장자가 JAVA라는 것은 원시소스코드(인간이 보는 언어)
기계어 .class file 실행파일

JRE에 기계어로 존재하는 rt.jar 이것을 원시소스코드로 모아둔것이 src.zip
이에 대한 설명을 모아둔것이 API Documents

IDE = Integrated Development Environment(통합개발환경)
이클립스 에디터의 장점은 플러그인 기술이 좋음

src = source => 프로그램만 들어감 
--------------------------------------------------------------------------------------------------------------------
20.04.07

자바 기본적인 문법(변수와 조건문) 


Package 이름 지정할 시 전부 소문자로 지정
.을 통해 degree 구분 
// , /*(멀티라인 코멘트)
프로그램 = 서로다른 입력값을 받아 그에 맞는 출력을 내보내줌

이클립스에 저장 시 Java syntax에 class file(실행 파일) 컴파일 진행 

JVM이 실행시 Class File에 main이 있는지 확인, 그 다음 라인부터 실행 

Java 폴더 아래 bin 아래 javac.exe 가 컴파일 실행, run 시 java.exe 실행

Garbage Collection = Thread -> JVM의 Heap 영역을 주기적으로 자동으로 정리해줌, 우선순위가 1이지만 쌓이게 되면 자동적으로 정리  
Thread 우선 순위가 1~10까지 존재, 10이 제일 중요 

***GitLab 회원가입해두기(이름 한글로 풀네임 쓰기)

Data Type
기본형(Primitive Data Type), 소문자 
1. 숫자형
	- 정수 byte(8bit) < short(16bit) < int(32bit) < long(64bit)
	- 실수 float(32bit) < double(64bit)
		double salary = 4500000.0; (float 아님)
		float salary = 4500000.0F; (float 아님)
2. 문자형 - char(16bit)(한 문자를 나타내는 데이타 타입) 'a', 'A', '나'-> 8bit
3. 논리형 - boolean(true/false)

참조형(Class Data Type), 첫글자 대문자

ctrl + shift + O = 자동으로 필요한 파일 import 해줌

field는 값을 가짐 -> 묵시적 초기화 진행됨 
정수 = 0 
실수 = 0.0
문자 = '\u0000'
논리형 = false
Class Data Type = null

--------------------------------------------------------------------------------------------------------------------
20.04.08

Object(객체)의 기능,특징을 나타낼 수 있는 Class를 만들었다.
instance = 메모리에 올라가서 사용할 수 있는 값이 올라간 객체 

생성자 -> Method에서 set의 역할과 같은 역할을 할 수 있다. 

Encore en = new Encore()
여기서 en 은 Heap에 올라가있는 Encore()의 주소값을 갖고있다. 
Class = Type -> 어떤 타입으로 만들지 클래스로 정한다. 

Ex)
세가지 종류의 티셔츠가 있다. 라운드티, 점퍼티, 반팔티 
shirt -> 이게 타입 
LongSleeved :boolean
BrandName : String
color : char

Shirt 라운드티 = new Shirt()    -> 이 작업이 instance
Shirt 점퍼티 = new Shirt()
Shirt 반팔티 = new Shirt()
		 -------
		 생성자
Method 첫글자는 소문자 생성자는 대문자
Constructor(생성자) = 객체가 생성될 때마다 호출되는 것 -> 객체마다 각각의 특성을 갖고 있기 때문에 생성될때마다 호출
명시적 생성자가 하는일은 Field Initialization
클래스에 아무런 생성자가 없다면 컴파일러가 기본 생성자는 넣어준다. 
컴파일러가 하는 일은 타입체크(문법체크) 

클래스를 만들었을 때 필드를 추출한 후 값을 주입 
값을 주입하는 통로는 setter(), 생성자 두가지 존재 

Encapsulation -> 다른 클래스에서 원래 클래스의 데이터에 접근할 수 없도록 방지 
필드 앞에 public 와 private 를 붙이는데
public는 다른 클래스에서도 데이터 접근 가능
private는 같은 클래스에서만 데이터 접근 가능 
따라서 main 클래스에서 다른 클래스의 데이터를 변경시 setMethod를 사용하여 변경한다.
왜냐하면 Method에서 조건을 붙여 데이터를 분별할 수 있기 때문
따라서 앞으로 Class를 만들시 필드는 private로 지정

--------------------------------------------------------------------------------------------------------------------
20.04.09

Array 
- 같은 데이타 타입을 가지는 서로다른 값들이 하나의 변수를 처리되는것
- 클래스가 존재하지않는다.
- 위치값을 찾으려면 length를 사용

FQCN = Full Qualified Class Name -> 패키지명을 포함한 클래스 전체 이름

--------------------------------------------------------------------------------------------------------------------
20.04.10

배열에서 타입을 넣는거에 대해서 한다. 
생각하는것을 프로그래밍화한다. 
얼마나 많이 생각하고 실패했는지 중요하다.
프로그래밍할 때 많은 실패를 한다고 아무런 리스크가 발생하지않는다.

객체(instance) 는 DB의 행에 1대1 매핑됨
field 는 DB의 열 과 매핑됨


1.Product 타입 배열 생성
Product pros = new Product[3];
2.배열 각각의 항목에 객체를 초기화 선언
pros[0] = new Product(*,*,*)
pros[1] = new Product(*,*,*)
pros[2] = new Product(*,*,*)

기본형 타입의 배열에는 값이 바로들어가는 반면에 
클래스 타입의 배열에는 값을 참조하는 주소가 들어간다. 

상품에 대한 정보를 저장하는 VO클래스
VO : Value Object -> 자료만 담는 객체 
메서드가 있으면 안됨 
DB와 연결될 것임 

--------------------------------------------------------------------------------------------------------------------
20.04.13
Object Aid UML Explorer : 이클립스에서 플러그인 설치, 파일을 드래그하는 것만으로 매우 간단하게 클래스 다이어그램이란 결과물을 얻을 수 있다.
클래스 다이어그램 : 클래스간의 관계를 파악할 때 보는것 

CRUD = Create Reading Update Delete 
Create --- VO 생성---DB 한줄 추가
Update --- VO 정보 수정 --- 1 줄 중에 특정 컬럼정보 수정 -> 데이터의 정보를 수정할 때 유니크한 키 값(pk)은 수정이 불가함 
Delete -- VO 삭제 ---1줄 삭제
Reading ==find --- VO 불러오기

VO의 숫자와 비례로 배열의 갯수가 늘어난다.

--------------------------------------------------------------------------------------------------------------------
20.04.14
------ Object Clss(oop에서의 Object) 
필드(멤버 변수)

Public return_type 메소드(){// worker method
	로컬 변수
	}

------ Test Class(실행 클래스)-----
	1. 메모리에 객체를 Loading -> 객체 생성  / object ob = new object()     Service s = new Service();
	2. Calling Method - 호출 -> 사용한다. / ob.getDetail();  s.method();
	
상속(Inheritance) --- 생성자
다형성 Polymorphism!! --- MethodOverriding, Object Casing 생성자 오버로딩

----> static/ Interface/ Abstract Class | Collecction API | 

More Advanced Feature
| Exception Handling | Thread | Stream | Socket, Network

-----------------------------------------------------------------------------
JDBC(Java Database Connectivity)(2Tier) => 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API
-----------------------------------------------------------------------------
WEB(3Tier)

상속 (Inheritance): 부모가 가진 모든것(Field, Method)을 자식에게 물려주는 것 and 자식은 자신만의 멤버를 추가 
-> 따라서 자식은 부모보다 기능이 확장되어짐 
자식의 기능이 부모의 기능에서 더 확장 되었기에 자식을 사용-> 단말 Node
부모의 기능을 사용하여 가지치기를 통해 서로 다른 자식의 기능을 확장
자바는 프로그램의 안정성을 위해 단일 상속만을 허용한다. 

부모와 자식의 상속 관계가 너무 강하기에 부모가 잘못되면 자식은 끝장

1. 상속을 하려면  추상화 가정을 거친후 
2. Is a realationship 

Class Object is the root of the class hierarchy.
Object 클래스에서 equals 메서드에서는 서로의 주소값을 비교하여 찾아냄

자바 domentation 주석을 Book	Manager에 달아라

--------------------------------------------------------------------------------------------------------------------
20.04.16
변수의 종류 - 필드 변수, 지역 변수, 스태틱 변수(static)

static 키워드 
	1. static한 멤버(field, method)는 객체 생성없이 사용할 수 있다. (new **) 
		-> 객체 생성을 안해도 메모리에 올라가 있다. -> class file loader 되는 시점에 올라간다.
		ex) Math.random(), main(), Integer.parseInt(), System.out.print() 
		-> class 네임.@@으로 사용시 따로 객체 생성을 할 필요가 없다. : System s = new System(); 의 과정이 필요 x, 그냥 System.out 으로 사용
	2. static한 멤버는 생성된 객체들은 모두 공유된다
	3. static 은 final 과 함께 거의 사용된다. 
	4. 싱글톤 패턴시 필수적으로 사용 
	5. static 으로 생성된 멤버는 class area에 올라감 (new 로 생성될 시 heap에 올라감 ) 
		-> 모든 멤버를 static 로 올릴 시 garbage collector의 대상이 아니므로 메모리 청소가 안됨 
	6. static한 변수는 로컬 레벨에 못씀

상속은 멤버를 공유 
인터페이스는 기능만 생각 

클래스 상속은 단일 상속만 허용/ 인터페이스는 다중 상속 허용 -> 필드가 없고 기능 구현이 안되있기 때문에 메서드 이름이 같아도 문제가 없음 
상속을 받은 메서드의 기능을 모두 사용할 필요는 없다. 

객체를 저장하는 특징을 다루는것이 Collection Api
부모의 특징 -> 인터페이스의 특징을 다루는 것이 핵심 

map 콜렉션과 다른 저장 방식을가지고 있기에 콜렉션 하위에 포함되있지않다.
vector의 경우 모든 메서드에 동기화 처리르 했기때문에 안정성은 높지만 처리속도는 매우 느리기때문에 현업에 사용 안함
ArrayList의 경우 동기화 처리를 삭제했음 따라서 안정성이 낮음 -> 따라서 개발자가 직접 동기화 처리를 해야함 

set
::
C -> add
R -> iterator
U -> 키값을 받아와 value 덮어 씌우기 (가능?)
D -> remove

list
::
C -> add (Return Type = boolean)
R -> get (Return Type = index)
U -> set (Return Type = index)
D -> remove (Return Type = boolean)

map 
::
C -> put (인자  = keu,value/ Return Type = value)
R -> get (인자 = key /Return Type = value)
U -> put(덮어씌우기)
D -> remove
keySet() -> key값을 모를때 key를 받아온 후 value를 찾아냄

--------------------------------------------------------------------------------------------------------------------
20.04.20

Exception
프로그램을 실행하는 도중에 예기치않게 발생하는 사건
자바는 이러한 버그조차 객체로 핸들링한다. 

예외를 처리하는 키워드 
1) try catch
2) throw

예외는 메소드 안에서 줄 단위로 발생한다. 
예외 처리하는 명시적인 방법
1) try ~catch
try{
	//예외 발생 가능성 있는 코드 ----A, B
}catch(A){
	//위에서 발생한 예외 객체로 잘 잡았을 때의 코드 
}


--------------------------------------------------------------------------------------------------------------------
20.04.23

Process : 현재 실행중인 파일 -> 실행 파일
Thread : Process 내에서 진행되는 세부적인 작업 단위(전문화된 작업 단위, 특정한 작업만 전담하는 단위, interupted)
우선순위는 1- 10, 10이 제일 중요 

Multi Tasking System 
- Multi Process
- Multi Thready(독립적이지만 Process Resource를 쉐어링함)


Thread API

 class PrimeThread extends Thread { // Thread 상속
         long minPrime;
         PrimeThread(long minPrime) {
             this.minPrime = minPrime;
         }

         public void run() {// Thread 가 하려는 일을 이 안에 정의 
             // compute primes larger than minPrime
              . . .
         }
     }


	 PrimeThread p = new PrimeThread(143); // 생성자 생성 
	     p.start(); // run()을 호출해야하지만 start()를 호출한 상황 
	     
	     
State Diagram of the Thread : Thread 의 상태를 확인할 수 있는 Diagram


--------------------------------------------------------------------------------------------------------------------
20.04.23

스트림 노드계열, 필터 계열 구분 인자값 구분 -> 더 알아봐야할 필요가 있음

Thread 
:: 
String userId

ChattThread 
::

















































